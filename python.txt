python

***** 숫자형 *****



***** 문자열 *****

str.join()
s = ','.join(['가나','다라','마바'])

str.splite()
items = '가나,다라,마바'.split(',')

str.partition()
departure, _, arrival = "Seattle-Seoul".partition('-')

str.format()
s = "Name: {0}, Age: {1}".format("강정수", 30)
s = "Name: {name}, Age: {age}".format(name="강정수", age=30)
area = (10, 20)
s = "width: {x[0]}, height: {x[1]}".format(x = area)


***** 리스트 [] *****

========================================================
[출력표현식 for 요소 in 입력Sequence [if 조건식]]
--------------------------------------------------------
>>> [x for x in [1,2,3,4,5] if x % 2 == 0]
[2, 4]

>>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

>>> matrix = [
	[1,2,3,4],
	[5,6,7,8],
	[9,10,11,12],
	]
>>> 
>>> [[row[i] for row in matrix] for i in range(4)]
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
========================================================

=========================================
list.sort(reverse=False, key=None)
key : 함수 지정 가능
sorted(list, reverse=False, key=NOne)
-----------------------------------------
>>> r
[1, 2, 3, 4, 5, 6, 6]
>>> def t(n):
	return n%2

>>> a = sorted(r, key=t)
>>> a
[2, 4, 6, 6, 1, 3, 5]
=========================================

얕은 복사(shallow copy) : 데이터 그대로, 주소 복사
a.copy()

깊은 복사 : 데이터까지 복사, 새로운 데이터 생성
import sopy
foo = copy.deepcopy(list)

stack 처럼 사용
list.append(x)
list.pop()

================================================
queue 처럼 사용
list.append(x)
list.pop(0) : 느리다

collections.deque 를 사용
------------------------------------------------
>>> from collections import deque
>>> queue = deque(["Eric", "John", "Michael"])
>>> queue.append("Terry")
>>> queue.append("Graham")
>>> queue.popleft()
'Eric'
>>> queue
deque(['John', 'Michael', 'Terry', 'Graham'])
>>> queue.pop()
'Graham'
>>> queue
deque(['John', 'Michael', 'Terry'])
================================================

***** 튜플 () *****



***** 딕셔너리 {} *****

=================================================================
dict의 items()는
Dictonary의 키-값 쌍 Tuple 들로 구성된 dict_items 객체를 리턴한다.
dict_items 객체를 리스트로 변환하기 위해서는 list()를 사용할 수 있다.
이는 dict_keys, dict_values 객체에도 공히 적용된다.
-----------------------------------------------------------------
>>> scores = {"철수": 90, "민수": 85, "영희": 80}
>>> items = scores.items()
>>> print(items)
# 출력: dict_items([('민수', 85), ('영희', 80), ('철수', 90)])
# dict_items를 리스트로 변환할 때
>>> itemsList = list(items)
=================================================================

>>> if '길동' in scores:
		print(scores['길동'])

>>> persons = [('김기수', 30), ('홍대길', 35), ('강찬수', 25)]
>>> mydict = dict(persons)
>>> mydict.update({'홍대길':33,'강찬수':26})

dict.get(key, default)
dict.pop(key)
dict.popitem()
dict.clear()
dict.copy()
dict.update({key:default})
dict.setdefault(key, default) : 키가 있는 경우 값 리턴, 키 없으면 디폴트값으로 새로운 요소 추가
dict.fromkeys([keys], default) : iterable키 값을 전달 받아 사전 생성

dict.key()
dixt.values()
dict.items()
list(dixt)


=======================================
switch 비슷하게 사용법( switch_dict.py )
---------------------------------------
{}.get(num, "")
=======================================



***** 집합 {} *****

set.add(7)
set.update({4,5,6})
set.remove(2)
set.clear()

a & b 교집합
a | b 합집합
a - b 차집합


***** 불 *****



***** if *****

is
is not
a < b == c

>>> a = 0
>>> b = 0.0
>>> a == b
True


***** while *****



***** for *****



***** 함수 *****

<---------------------------
def foo(*x) # x는 가변 인자
	for v in x:
		print(v)
--------------------------->

<--------------------------------------
def foo(**x):
	for key in x.keys():
		print(key + ":" + x[key])

foo(name="홍길동", tel="010-1234-1234")
--------------------------------------->

<------------------------------------------
>>> foo = [2,18,9,22,17,24,8,12,27]
>>> list(filter(lambda x: x%3 == 0, foo))
[18, 9, 24, 12, 27]
------------------------------------------>


***** 사용자 입력과 출력 *****

***** 파일 읽고 쓰기 *****

***** 클래스 *****

id() : 객체 주소 return

***** 모듈 *****

***** 패키지 *****

***** 예외 처리 *****

***** 내장 함수 *****

==========================================================================
map(func, iterable)
입력받은 자료형의 각 요소가 함수 func에 의해 수행된 결과를 묶어서 리턴하는 함수
--------------------------------------------------------------------------
>>> a = [1,2,3,4]
>>> b = [17, 12, 1, 10]
>>> list(map(lambda x, y: x+y, a, b))
[18, 14, 4, 14]
>>> c = [5,6,7,8]
>>> list(map(lambda x, y, z: x+y+z, a, b, c))
[23, 20, 11, 22]
==========================================================================

======================================================
enumerate
순서가 있는 자료형(list, tuple, str)을 입력으로 받아
index값을 포함하는 enumerate 객체를 return
( for 문과 함께 자주 사용)
------------------------------------------------------
>>> for i, name in enumerate(['body', 'foo', 'bar']):
		print(i, name)
0 body
1 foo
2 bar
======================================================





***** 외장 함수 *****
















=====================================================================
반복자(iterator)
여러개의 요소를 가지는 컨테이너(list, tuple, set, dict, str)에서
각 요소를 하나씩 꺼내 어떤 처리를 수행하는 간편한 방법을 제공하는 객체

Generator
iterator를 만드는 도구. 데이터를 반환하기 위해서 yield문장을 사용.
매번 next() 가 호출될 때마다 Generator는 중단된 지점부터 다시 시작합니다.
(모든 데이터 값과 마지막 실행된 명령문을 기억합니다.)
즉, yield를 사용할 경우 내부 값들이 보존됩니다.
---------------------------------------------------------------------
>>> def reverse(data):
	for index in range(len(data)-1, -1, -1):
		yield data[index]

>>> for char in reverse('golf'):
	print(char)

f
l
o
g
=====================================================================

